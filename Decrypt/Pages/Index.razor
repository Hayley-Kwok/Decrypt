@page "/"
@using System.Text.Json
@using Decrypt.Model.Facebook
@using System.IO.Compression
@using Decrypt.Model
@inject DialogService _dialogService

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<div class="row">
	<div class="col-4">
		<NumberCardWithTableDialog Title="SharedAdvertiser" Number="_advertisersUsingYourActivity?.SharedAdvertisers?.Count() ?? 0"
								   OnClickFunc="ShowAdvertisersUsingYourActivityDialog" />
	</div>
</div>

<h1>Load in zip files</h1>
<InputFile OnChange="@LoadFiles" />


@code {
	private const long MaxFileSize = 4294967296; // 4 GB
	private AdvertisersUsingYourActivity? _advertisersUsingYourActivity;

	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		var options = new JsonSerializerOptions();
		options.Converters.Add(new FbConverter());

		//TODO: figure out a better way to do this
		await using var stream = new MemoryStream();
		await e.File.OpenReadStream(MaxFileSize).CopyToAsync(stream);
		using var archive = new ZipArchive(stream);
		foreach (var entry in archive.Entries)
		{
			if (entry.FullName.EndsWith(AdvertisersUsingYourActivity.Filepath, StringComparison.OrdinalIgnoreCase))
			{
				var unzippedEntryStream = entry.Open();
				_advertisersUsingYourActivity = await JsonSerializer.DeserializeAsync<AdvertisersUsingYourActivity>(unzippedEntryStream, options);
			}
		}

	}

	private async Task ShowAdvertisersUsingYourActivityDialog()
	{
		await _dialogService.OpenAsync<SharedAdvertisersTable>("Advertisers Using Your Activity",
			new Dictionary<string, object>
				{ { nameof(SharedAdvertisersTable.SharedAdvertisers), _advertisersUsingYourActivity?.SharedAdvertisers ?? Array.Empty<SharedAdvertiser>() } },
			new DialogOptions { Width = "90%", Height = "80%", Resizable = true }); //TODO: figure out dynamic sizing
	}
}