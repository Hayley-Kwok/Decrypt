@page "/{UrlCompany}/loaddata"
@using Privasight.Wasm.Services
@using Privasight.Wasm.UI
@using Privasight.Wasm.Configs

@inject CompanyDataService _companyDataService
@inject DialogService _dialogService
@inject NotificationService _notificationService

<PageTitle>Load in data | Privasight</PageTitle>

<h1>Load in zip files</h1>
<div class="my-3">
	<InputFile label="file_upload" title="file_upload" OnChange="@LoadFiles" accept=".zip" disabled="@_companyDataService.LoadingData"/>
</div>
@if (!string.IsNullOrWhiteSpace(_companyDataService.DataLoadingStatus))
{
	<div>Data loading Status: @_companyDataService.DataLoadingStatus</div>
}

<div class="my-3 d-flex flex-column flex-lg-row">
	<RadzenButton class="m-2" Text="@($"How to download your {UrlCompany} data")" Click=@OpenInfoDialog ButtonStyle="ButtonStyle.Info"/>
	
	<ClearCompanyDataButton Class="m-2" Company="_company"/>
</div>

@code {
	private AvailableCompany _company;
	[Parameter]
	public string UrlCompany { get; set; } = "";

	protected override void OnInitialized()
	{
		_company = Enum.Parse<AvailableCompany>(UrlCompany);
	}

	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		_companyDataService.LoadingData = true;
		_companyDataService.DataLoadingStatus = "Loading ...";
		try
		{
			var (newData, generationDate) = await DataLoadInHelper.TransformJsonToObj(e, CompanyConfigs.AvailableFileWrappers[_company]);
			DataLoadInHelper.AddGenerationDate(newData, generationDate);

			await _companyDataService.UpdateAvailableData(_company, newData);
			_companyDataService.DataLoadingStatus = "loading finished";
			_notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Data loaded in successfully", 
				Duration = 4000 });
		}
		catch (Exception ex)
		{
			var message = "An error occurred. Please refresh and try again.";
			if (ex is IOException)
			{
				message = "The file is too large. The file size limit is 512 MB.";
			}
			_companyDataService.DataLoadingStatus = message;
			_notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, 
				Summary = "Failed to load in the data", 
				Detail = message, Duration = 4000 });
		}

		_companyDataService.LoadingData = false;
		StateHasChanged();
	}

	public async Task OpenInfoDialog()
	{
		await _dialogService.OpenAsync($"How to download your {UrlCompany} Data",
			_ => DataDownloadInfoFragment,
			new DialogOptions { Width = "95%", Height = "95%", Resizable = true });
	}

	
	RenderFragment DataDownloadInfoFragment => builder =>
	{
		builder.OpenComponent(1, CompanyConfigs.DataDownloadInfo[_company]);
		builder.CloseComponent();
	};
}