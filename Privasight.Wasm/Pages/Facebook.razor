@page "/facebook"
@using Privasight.Model.Shared.Interfaces
@using Privasight.Wasm.Services
@using Privasight.Model.Shared

@inject DialogService _dialogService
@inject DataService _dataService

<PageTitle>Facebook Data</PageTitle>
<h1>Your Facebook Data</h1>

<div class="row">
	<div class=@_colStr>
		<NumberCardWithLineChart OnClickFunc="() => Task.CompletedTask"/>
	</div>
	@if (_dataService.FbRoot?.AvailableData.Values != null)
	{
		foreach (var wrapper in _dataService.FbRoot?.AvailableData.Values!)
		{
			switch (wrapper)
			{
				case ISingleItemListFile<StringWrapperDbObj> stringList:
					_singleStringList = stringList;
					<div class="@_colStr">
						<NumberCardWithOnclick OnClickFunc="() => ShowDataListTableDialog()"
						                       Number="stringList.Items?.Count() ?? 0"
						                       Title="@stringList.Title"/>
					</div>
					break;

				case ISingleItemListFile itemList:
					_singleItemListFile = itemList;
					<div class=@_colStr>
						@NumberCardWithSingleItemListTableDialogInstance
					</div>
					break;
			}
		}
	}
</div>

@code {
	const int ColNumber = 3;
	string _colStr => $"col-md-{12/ColNumber}";

	ISingleItemListFile _singleItemListFile = null!;
	ISingleItemListFile<StringWrapperDbObj> _singleStringList = null!;

	RenderFragment NumberCardWithSingleItemListTableDialogInstance => builder =>
	{
		var type = typeof(NumberCardWithSingleItemListTableDialog<>).MakeGenericType(_singleItemListFile.ItemsType);
		builder.OpenComponent(1, type);
		builder.AddAttribute(2,"SingleItemListFile", _singleItemListFile);
		builder.CloseComponent();
	};

	private async Task ShowDataListTableDialog()
	{
		await _dialogService.OpenAsync<DataListTable<StringWrapperDbObj>>(_singleStringList.Title,
			new Dictionary<string, object>
			{
				{ nameof(DataListTable<string>.Items), _singleStringList.Items?? Array.Empty<StringWrapperDbObj>() },
				{ nameof(DataListTable<string>.Description), _singleStringList.Description }
			},
			new DialogOptions { Width = "90%", Height = "90%", Resizable = true });
	}
}
