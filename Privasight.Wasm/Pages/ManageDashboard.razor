@page "/{UrlCompany}/manageDashboards"

@using Privasight.Wasm.Services
@using Privasight.Model.Shared.DataStructures.Dashboard
@using Privasight.Wasm.UI.ManageDashboard
@using System.ComponentModel
@using Privasight.Wasm.Configs

@implements IDisposable

@inject DataService _dataService

<PageTitle>Manage Dashboards | Privasight</PageTitle>

<h1 class="my-2">Manage Dashboards</h1>

<h3 class="my-2">Current Dashboards</h3>
<div class="row">
	<div class="col-md-8">
		<RadzenListBox @bind-Value=@_chosenDashboard
		               Data="@_dataService.DashboardSettings?[_company]"
		               TextProperty="@nameof(DashboardSetting.Name)"
		               Class="w-100 h-100 text-center"
		               Style="min-height: 100px; max-height: 200px;"
		               Change="OnListBoxClick"/>
	</div>
	<div class="col-md-4">
		<RadzenButton ButtonStyle="ButtonStyle.Success" Text="Create New Dashboard" Click="OnNewDashboardBtnClick"/>
		<br/><br/>
		<RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Delete Dashboard" Click="OnDeleteDashboardBtnClick"/>
	</div>
</div>
@if (_showEditDashboard)
{
	<div class="my-3">
		<EditDashboard 
			ExistingDashboardSetting="_chosenDashboard"
			OnCreateButtonClick="OnDashboardEditFinished"
			Company="_company"/>
	</div>
}

@code {
	private bool _showEditDashboard;
	private DashboardSetting? _chosenDashboard = new(new HashSet<CardSetting>());

	private AvailableCompany _company;
	[Parameter]
	public string UrlCompany { get; set; } = "";

	public void Dispose() => _dataService.PropertyChanged -= PropertyHasChanged;

	protected override async Task OnInitializedAsync()
	{
		_company = Enum.Parse<AvailableCompany>(UrlCompany);
		_dataService.PropertyChanged += PropertyHasChanged;
		if (_dataService.DashboardSettings == null)
		{
			await _dataService.SetDashboardSettingsFromStorage();
		}

		if (!_dataService.DashboardSettings!.ContainsKey(_company))
		{
			_dataService.DashboardSettings.Add(_company, new List<DashboardSetting>());
		}
	}

	private void PropertyHasChanged(object? sender, PropertyChangedEventArgs args)
	{
		if (args.PropertyName == nameof(_dataService.DashboardSettings))
		{
			StateHasChanged();
		}
	}

	private void OnDashboardEditFinished()
	{
		_showEditDashboard = false;
		_chosenDashboard = null;
	}

	private void OnNewDashboardBtnClick()
	{
		_chosenDashboard = null;
		_showEditDashboard = true;
	}

	private void OnListBoxClick()
	{
		_showEditDashboard = true;
	}

	private async Task OnDeleteDashboardBtnClick()
	{
		await _dataService.UpdateDashboardSettings(_company, _chosenDashboard, DataService.UpdateAction.Delete);

		_chosenDashboard = null;
		_showEditDashboard = false;
	}
}