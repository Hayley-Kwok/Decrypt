@page "/"
@using System.Runtime.InteropServices
@using Microsoft.EntityFrameworkCore
@using Privasight.Model.Facebook.Data
@using Privasight.Wasm.Services

@inject DataService _dataService
@inject ConfigService _configService
@inject DialogService _dialogService
@inject IJSRuntime _js
@inject IDbContextFactory<FbContext> _dbContextFactory

<PageTitle>Home</PageTitle>

<h1>Load in zip files</h1>
<div class="my-3">
	<InputFile label="file_upload" title="file_upload" OnChange="@LoadFiles" accept=".zip"/>
</div>
<div class="my-3">
	<h3>Download Links:</h3>
	<a href="https://www.facebook.com/dyi/?referrer=ayi" target="_blank">Download your Facebook Data</a>
</div>

<div>@_generationDate</div>

@code {
	
	

	private DateTimeOffset _generationDate;
	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		var (newData, generationDate) = await DataAccessHelper.TransformJsonToObj(e, _configService);
		
		//this line is here only for the display on the FE
		_generationDate = generationDate;

		DataAccessHelper.AddGenerationDate(newData, generationDate);
		await DataAccessHelper.LoadDataIntoDatabase(newData, _dbContextFactory);
		await DataAccessHelper.GetLatestAvailableData(_dbContextFactory, _dataService);
	}

	protected override async Task OnInitializedAsync()
	{
		if (RuntimeInformation.IsOSPlatform(OSPlatform.Create("browser")))
		{
			// create SQLite database file in browser
			var module = await _js.InvokeAsync<IJSObjectReference>("import", "./dbstorage.js");
			await module.InvokeVoidAsync("synchronizeFileWithIndexedDb", DataAccessHelper.SqliteDbFilename);
		}

		await DataAccessHelper.GetDbContext(_dbContextFactory);
		await base.OnInitializedAsync();
	}
}