@using Privasight.Wasm.UI.CardComponents.NumberCards.Base
@using Privasight.Model.Shared.Display
@using Privasight.Model.Shared.Helpers
@using Privasight.Wasm.UI.CardComponents.Tables
@using Privasight.Model.Shared.DataStructures
@using Privasight.Model.Shared.Display.Dashboard
@using Privasight.Wasm.Configs

@inject DialogService _dialogService
@inject NotificationService _notificationService

<RadzenSteps>
	<Steps>
		<RadzenStepsItem Text="Data Type">
			<h3>1. Select a data type</h3>
			<div class="d-flex justify-content-center">
				<RadzenListBox
					Data="@ReflectionHelper.GetDisplayDetailsFromFileWrapperTypes(CompanyConfigs.AvailableFileWrappers[Company].Values)"
					TextProperty="@nameof(FileWrapperTypeDisplayDetails.Title)"
					@bind-Value="@_fileWrapperDisplayDetails"
					TValue="FileWrapperTypeDisplayDetails"
					Class="w-75 h-75 d-flex text-center"/>
			</div>
			<p class="d-flex justify-content-center">Picked Type: @(_fileWrapperDisplayDetails?.Title ?? "")</p>
		</RadzenStepsItem>
		<RadzenStepsItem Text="Card Type" Disabled="@(_fileWrapperDisplayDetails == null)">
			<div class="row m-1">
				<div class="col-md-1"></div>
				<div class="col-md-5 m-1" data-toggle="tooltip" title="Show the total number regardless the generation date">
					<NumberCard Title="Plain Number Card" Number="5"/>
				</div>
				<div class="col-md-5 m-1" data-toggle="tooltip" title="Show the trend of changes based on the generation date.\n The number will be the latest total.">
					<NumberCard Title="Card With Line Chart" CardType="CardTypes.WithLineChart"
					            LineChartItems="_templateLineChartItems"/>
				</div>
				<div class="col-md-1"></div>
			</div>
			<div class="d-flex justify-content-around">
				<RadzenRadioButtonList @bind-Value="_cardStyle"
				                       TValue="CardTypes">
					<Items>
						<RadzenRadioButtonListItem Text="Plain Number Card" Value="CardTypes.PlainNumberCard"/>
						<RadzenRadioButtonListItem Text="With Line Chart" Value="CardTypes.WithLineChart"/>
					</Items>
				</RadzenRadioButtonList>
			</div>
		</RadzenStepsItem>
		<RadzenStepsItem Text="Detailed Dialog" Disabled="@(_fileWrapperDisplayDetails == null)">
			<div class="row m-1">
				<div class="col-md-6 h-75">
					<DataListTable TItem="StringWrapperDbObj" Items="_templateItemsForTables" Description="@DialogTypes.DataList.ToString()"/>
				</div>
				<div class="col-md-6">
					<DetailedTable Items="_templateItemsForTables" Description="@DialogTypes.DetailedTable.ToString()"/>
				</div>
			</div>
			<div class="d-flex justify-content-around">
				<RadzenRadioButtonList @bind-Value="_chosenDialog"
				                       TValue="DialogTypes">
					<Items>
						<RadzenRadioButtonListItem Text="@DialogTypes.NoDialog.ToString()" Value="DialogTypes.NoDialog"/>
						<RadzenRadioButtonListItem Text="@DialogTypes.DataList.ToString()" Value="DialogTypes.DataList"/>
						<RadzenRadioButtonListItem Text="@DialogTypes.DetailedTable.ToString()" Value="DialogTypes.DetailedTable"/>
					</Items>
				</RadzenRadioButtonList>
			</div>
		</RadzenStepsItem>
	</Steps>
</RadzenSteps>
<div class="d-flex justify-content-center">
	@if (ExistingCardSetting == null)
	{
		<RadzenButton Class="mx-2" Text="Create Card"
		              Disabled="@(_fileWrapperDisplayDetails == null)"
		              ButtonStyle="ButtonStyle.Success"
		              Click="OnCreateButtonClick"/>
	}
	else
	{
		<RadzenButton Class="mx-2" Text="Update Card"
		              ButtonStyle="ButtonStyle.Success"
		              Click="OnUpdateButtonClick"/>
	}

	<RadzenButton Class="mx-2" Text="Cancel"
              ButtonStyle="ButtonStyle.Danger"
              Click="OnCancelButtonClick"/>
</div>

@code {
	private readonly IEnumerable<LineChartItem> _templateLineChartItems = new[]
	{
		new LineChartItem(DateTime.Parse("02/02/2022 00:00:00"), 0),
		new LineChartItem(DateTime.Parse("03/02/2022 00:00:00"), 1),
		new LineChartItem(DateTime.Parse("04/02/2022 00:00:00"), 2),
		new LineChartItem(DateTime.Parse("05/02/2022 00:00:00"), 2)
	};

	private readonly IEnumerable<StringWrapperDbObj>? _templateItemsForTables = new[]
	{
		new StringWrapperDbObj("Uber") {GeneratedOn = DateTimeOffset.Parse("02/02/2022 00:00:00")},
		new StringWrapperDbObj("Uber") {GeneratedOn = DateTimeOffset.Parse("03/02/2022 00:00:00")},
		new StringWrapperDbObj("Uber") {GeneratedOn = DateTimeOffset.Parse("04/02/2022 00:00:00")},
		new StringWrapperDbObj("LinkedIn") {GeneratedOn = DateTimeOffset.Parse("03/02/2022 00:00:00")},
		new StringWrapperDbObj("LinkedIn") {GeneratedOn = DateTimeOffset.Parse("04/02/2022 00:00:00")},
	};

	private FileWrapperTypeDisplayDetails? _fileWrapperDisplayDetails = null;
	private CardTypes _cardStyle;
	private DialogTypes _chosenDialog;

	[Parameter, EditorRequired]
	public AvailableCompany Company { get; set; }

	[Parameter, EditorRequired]
	public HashSet<CardSetting> CardSettings { get; set; } = null!;

	[Parameter]
	public CardSetting? ExistingCardSetting { get; set; }

	protected override void OnParametersSet()
	{
		if (ExistingCardSetting != null)
		{
			_cardStyle = ExistingCardSetting.CardType;
			_chosenDialog = ExistingCardSetting.Dialog;
			_fileWrapperDisplayDetails = new FileWrapperTypeDisplayDetails(ExistingCardSetting.FileWrapperTypeName, ExistingCardSetting.FileWrapperTitle);
		}
	}

	private void OnCreateButtonClick()
	{
		var newCardAdded = CardSettings.Add(new CardSetting(_fileWrapperDisplayDetails!.Title, _fileWrapperDisplayDetails!.TypeName, _chosenDialog, _cardStyle));
		var message = newCardAdded ? "Card added successfully." : "A card with the same setting already exists. No changes were done.";
		_notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = message, Duration = 3000 });
		_dialogService.Close(true);
	}

	private void OnUpdateButtonClick()
	{
		CardSettings.Remove(ExistingCardSetting!);
		CardSettings.Add(new CardSetting(_fileWrapperDisplayDetails!.Title, _fileWrapperDisplayDetails!.TypeName, _chosenDialog, _cardStyle));
		_notificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Card updated successfully.", Duration = 3000 });
		_dialogService.Close(true);
	}

	private void OnCancelButtonClick()
	{
		_dialogService.Close(false);
	}
}