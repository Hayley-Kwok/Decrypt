@using Privasight.Wasm.Services
@using Privasight.Model.Shared.DataStructures
@using Privasight.Model.Shared.DataStructures.AbstractClasses
@using Privasight.Model.Shared.DataStructures.Interfaces
@using Privasight.Wasm.UI.CardComponents.NumberCards
@using Privasight.Wasm.UI.CardComponents
@using System.ComponentModel
@using System.Reflection.Metadata
@using Privasight.Model.Shared.Display.Dashboard
@using Privasight.Model.Shared.Helpers
@using Privasight.Wasm.Configs

@implements IDisposable

@inject DialogService _dialogService
@inject CompanyDataService _companyDataService

<div class="d-flex justify-content-between">
	<div>
		<h1>@Setting.Name</h1>
	</div>
	<div>
		<ClearCompanyDataButton Company="Company"/>
	</div>
</div>
<div class="row">
	@foreach (var (fileWrapperTitle,fileWrapperTypeName, dialogType, cardType) in Setting.CardSettings)
	{
		if (_companyDataService.AvailableData != null &&
			_companyDataService.AvailableData.ContainsKey(Company) &&
			_companyDataService.AvailableData[Company].TryGetValue(fileWrapperTypeName, out var data))
		{
			if (data is ISingleItemListFile singleItemList)
			{
				_singleItemListFile = singleItemList;
				_cardType = cardType;
				_dialogType = dialogType;
				<div class="@ColStr">
					@NumberCardWithDialogInstance
				</div>
			} 
		}
		else
		{
			<div class="@ColStr">
				<NoDataCard Title="@fileWrapperTitle"/>
			</div>
		}
	}
</div>

@code {
	private const string ColStr = "col-lg-4 col-md-6 my-lg-2 my-1 ";

	private ISingleItemListFile _singleItemListFile = null!;
	private CardTypes _cardType;
	private DialogTypes _dialogType;

	[Parameter, EditorRequired]
	public AvailableCompany Company { get; set; }

	[Parameter, EditorRequired]
	public DashboardSetting Setting { get; set; } = null!;

	RenderFragment NumberCardWithDialogInstance => builder =>
	{
		var t = SingleItemListFileHelper.GetItemsT(_singleItemListFile);
		var type = typeof(NumberCardWithDialog<>).MakeGenericType(t);
		builder.OpenComponent(1, type);
		builder.AddAttribute(2, nameof(NumberCardWithDialog<DbTableObj>.SingleItemListFile), _singleItemListFile);
		builder.AddAttribute(3, nameof(NumberCardWithDialog<DbTableObj>.ChosenDialog), _dialogType);
		builder.AddAttribute(4, nameof(NumberCardWithDialog<DbTableObj>.CardType), _cardType);
		builder.CloseComponent();
	};

	public void Dispose() => _companyDataService.PropertyChanged -= PropertyHasChanged;

	protected override async Task OnInitializedAsync()
	{
		_companyDataService.PropertyChanged += PropertyHasChanged;
		if (_companyDataService.AvailableData == null)
		{
			await _companyDataService.SetAvailableDataFromStorage();
		}
	}

	private void PropertyHasChanged(object? sender, PropertyChangedEventArgs args)
	{
		StateHasChanged();
	}
}